// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: model_server_config.proto

package tensorflow.serving;

public final class ModelServerConfigOuterClass {
  private ModelServerConfigOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * <pre>
   * The type of model.
   * TODO(b/31336131): DEPRECATED.
   * </pre>
   *
   * Protobuf enum {@code tensorflow.serving.ModelType}
   */
  public enum ModelType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>MODEL_TYPE_UNSPECIFIED = 0 [deprecated = true];</code>
     */
    @Deprecated
    MODEL_TYPE_UNSPECIFIED(0),
    /**
     * <code>TENSORFLOW = 1 [deprecated = true];</code>
     */
    @Deprecated
    TENSORFLOW(1),
    /**
     * <code>OTHER = 2 [deprecated = true];</code>
     */
    @Deprecated
    OTHER(2),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>MODEL_TYPE_UNSPECIFIED = 0 [deprecated = true];</code>
     */
    public static final int MODEL_TYPE_UNSPECIFIED_VALUE = 0;
    /**
     * <code>TENSORFLOW = 1 [deprecated = true];</code>
     */
    public static final int TENSORFLOW_VALUE = 1;
    /**
     * <code>OTHER = 2 [deprecated = true];</code>
     */
    public static final int OTHER_VALUE = 2;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @Deprecated
    public static ModelType valueOf(int value) {
      return forNumber(value);
    }

    public static ModelType forNumber(int value) {
      switch (value) {
        case 0: return MODEL_TYPE_UNSPECIFIED;
        case 1: return TENSORFLOW;
        case 2: return OTHER;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ModelType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ModelType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ModelType>() {
            public ModelType findValueByNumber(int number) {
              return ModelType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return ModelServerConfigOuterClass.getDescriptor().getEnumTypes().get(0);
    }

    private static final ModelType[] VALUES = values();

    public static ModelType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private ModelType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:tensorflow.serving.ModelType)
  }

  public interface ModelConfigOrBuilder extends
      // @@protoc_insertion_point(interface_extends:tensorflow.serving.ModelConfig)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Name of the model.
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    String getName();
    /**
     * <pre>
     * Name of the model.
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <pre>
     * Base path to the model, excluding the version directory.
     * E.g&gt; for a model at /foo/bar/my_model/123, where 123 is the version, the
     * base path is /foo/bar/my_model.
     * (This can be changed once a model is in serving, *if* the underlying data
     * remains the same. Otherwise there are no guarantees about whether the old
     * or new data will be used for model versions currently loaded.)
     * </pre>
     *
     * <code>string base_path = 2;</code>
     */
    String getBasePath();
    /**
     * <pre>
     * Base path to the model, excluding the version directory.
     * E.g&gt; for a model at /foo/bar/my_model/123, where 123 is the version, the
     * base path is /foo/bar/my_model.
     * (This can be changed once a model is in serving, *if* the underlying data
     * remains the same. Otherwise there are no guarantees about whether the old
     * or new data will be used for model versions currently loaded.)
     * </pre>
     *
     * <code>string base_path = 2;</code>
     */
    com.google.protobuf.ByteString
        getBasePathBytes();

    /**
     * <pre>
     * Type of model.
     * TODO(b/31336131): DEPRECATED. Please use 'model_platform' instead.
     * </pre>
     *
     * <code>.tensorflow.serving.ModelType model_type = 3 [deprecated = true];</code>
     */
    @Deprecated int getModelTypeValue();
    /**
     * <pre>
     * Type of model.
     * TODO(b/31336131): DEPRECATED. Please use 'model_platform' instead.
     * </pre>
     *
     * <code>.tensorflow.serving.ModelType model_type = 3 [deprecated = true];</code>
     */
    @Deprecated ModelServerConfigOuterClass.ModelType getModelType();

    /**
     * <pre>
     * Type of model (e.g. "tensorflow").
     * (This cannot be changed once a model is in serving.)
     * </pre>
     *
     * <code>string model_platform = 4;</code>
     */
    String getModelPlatform();
    /**
     * <pre>
     * Type of model (e.g. "tensorflow").
     * (This cannot be changed once a model is in serving.)
     * </pre>
     *
     * <code>string model_platform = 4;</code>
     */
    com.google.protobuf.ByteString
        getModelPlatformBytes();

    /**
     * <pre>
     * Version policy for the model indicating which version(s) of the model to
     * load and make available for serving simultaneously.
     * The default option is to serve only the latest version of the model.
     * (This can be changed once a model is in serving.)
     * </pre>
     *
     * <code>.tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy model_version_policy = 7;</code>
     */
    boolean hasModelVersionPolicy();
    /**
     * <pre>
     * Version policy for the model indicating which version(s) of the model to
     * load and make available for serving simultaneously.
     * The default option is to serve only the latest version of the model.
     * (This can be changed once a model is in serving.)
     * </pre>
     *
     * <code>.tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy model_version_policy = 7;</code>
     */
    FileSystemStoragePathSource.FileSystemStoragePathSourceConfig.ServableVersionPolicy getModelVersionPolicy();
    /**
     * <pre>
     * Version policy for the model indicating which version(s) of the model to
     * load and make available for serving simultaneously.
     * The default option is to serve only the latest version of the model.
     * (This can be changed once a model is in serving.)
     * </pre>
     *
     * <code>.tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy model_version_policy = 7;</code>
     */
    FileSystemStoragePathSource.FileSystemStoragePathSourceConfig.ServableVersionPolicyOrBuilder getModelVersionPolicyOrBuilder();

    /**
     * <pre>
     * String labels to associate with versions of the model, allowing inference
     * queries to refer to versions by label instead of number. Multiple labels
     * can map to the same version, but not vice-versa.
     * An envisioned use-case for these labels is canarying tentative versions.
     * For example, one can assign labels "stable" and "canary" to two specific
     * versions. Perhaps initially "stable" is assigned to version 0 and "canary"
     * to version 1. Once version 1 passes canary, one can shift the "stable"
     * label to refer to version 1 (at that point both labels map to the same
     * version -- version 1 -- which is fine). Later once version 2 is ready to
     * canary one can move the "canary" label to version 2. And so on.
     * </pre>
     *
     * <code>map&lt;string, int64&gt; version_labels = 8;</code>
     */
    int getVersionLabelsCount();
    /**
     * <pre>
     * String labels to associate with versions of the model, allowing inference
     * queries to refer to versions by label instead of number. Multiple labels
     * can map to the same version, but not vice-versa.
     * An envisioned use-case for these labels is canarying tentative versions.
     * For example, one can assign labels "stable" and "canary" to two specific
     * versions. Perhaps initially "stable" is assigned to version 0 and "canary"
     * to version 1. Once version 1 passes canary, one can shift the "stable"
     * label to refer to version 1 (at that point both labels map to the same
     * version -- version 1 -- which is fine). Later once version 2 is ready to
     * canary one can move the "canary" label to version 2. And so on.
     * </pre>
     *
     * <code>map&lt;string, int64&gt; version_labels = 8;</code>
     */
    boolean containsVersionLabels(
            String key);
    /**
     * Use {@link #getVersionLabelsMap()} instead.
     */
    @Deprecated
    java.util.Map<String, Long>
    getVersionLabels();
    /**
     * <pre>
     * String labels to associate with versions of the model, allowing inference
     * queries to refer to versions by label instead of number. Multiple labels
     * can map to the same version, but not vice-versa.
     * An envisioned use-case for these labels is canarying tentative versions.
     * For example, one can assign labels "stable" and "canary" to two specific
     * versions. Perhaps initially "stable" is assigned to version 0 and "canary"
     * to version 1. Once version 1 passes canary, one can shift the "stable"
     * label to refer to version 1 (at that point both labels map to the same
     * version -- version 1 -- which is fine). Later once version 2 is ready to
     * canary one can move the "canary" label to version 2. And so on.
     * </pre>
     *
     * <code>map&lt;string, int64&gt; version_labels = 8;</code>
     */
    java.util.Map<String, Long>
    getVersionLabelsMap();
    /**
     * <pre>
     * String labels to associate with versions of the model, allowing inference
     * queries to refer to versions by label instead of number. Multiple labels
     * can map to the same version, but not vice-versa.
     * An envisioned use-case for these labels is canarying tentative versions.
     * For example, one can assign labels "stable" and "canary" to two specific
     * versions. Perhaps initially "stable" is assigned to version 0 and "canary"
     * to version 1. Once version 1 passes canary, one can shift the "stable"
     * label to refer to version 1 (at that point both labels map to the same
     * version -- version 1 -- which is fine). Later once version 2 is ready to
     * canary one can move the "canary" label to version 2. And so on.
     * </pre>
     *
     * <code>map&lt;string, int64&gt; version_labels = 8;</code>
     */

    long getVersionLabelsOrDefault(
            String key,
            long defaultValue);
    /**
     * <pre>
     * String labels to associate with versions of the model, allowing inference
     * queries to refer to versions by label instead of number. Multiple labels
     * can map to the same version, but not vice-versa.
     * An envisioned use-case for these labels is canarying tentative versions.
     * For example, one can assign labels "stable" and "canary" to two specific
     * versions. Perhaps initially "stable" is assigned to version 0 and "canary"
     * to version 1. Once version 1 passes canary, one can shift the "stable"
     * label to refer to version 1 (at that point both labels map to the same
     * version -- version 1 -- which is fine). Later once version 2 is ready to
     * canary one can move the "canary" label to version 2. And so on.
     * </pre>
     *
     * <code>map&lt;string, int64&gt; version_labels = 8;</code>
     */

    long getVersionLabelsOrThrow(
            String key);

    /**
     * <pre>
     * Configures logging requests and responses, to the model.
     * (This can be changed once a model is in serving.)
     * </pre>
     *
     * <code>.tensorflow.serving.LoggingConfig logging_config = 6;</code>
     */
    boolean hasLoggingConfig();
    /**
     * <pre>
     * Configures logging requests and responses, to the model.
     * (This can be changed once a model is in serving.)
     * </pre>
     *
     * <code>.tensorflow.serving.LoggingConfig logging_config = 6;</code>
     */
    LoggingConfigOuterClass.LoggingConfig getLoggingConfig();
    /**
     * <pre>
     * Configures logging requests and responses, to the model.
     * (This can be changed once a model is in serving.)
     * </pre>
     *
     * <code>.tensorflow.serving.LoggingConfig logging_config = 6;</code>
     */
    LoggingConfigOuterClass.LoggingConfigOrBuilder getLoggingConfigOrBuilder();
  }
  /**
   * <pre>
   * Common configuration for loading a model being served.
   * </pre>
   *
   * Protobuf type {@code tensorflow.serving.ModelConfig}
   */
  public  static final class ModelConfig extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:tensorflow.serving.ModelConfig)
      ModelConfigOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ModelConfig.newBuilder() to construct.
    private ModelConfig(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ModelConfig() {
      name_ = "";
      basePath_ = "";
      modelType_ = 0;
      modelPlatform_ = "";
    }

    @Override
    @SuppressWarnings({"unused"})
    protected Object newInstance(
        UnusedPrivateParameter unused) {
      return new ModelConfig();
    }

    @Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ModelConfig(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              String s = input.readStringRequireUtf8();

              name_ = s;
              break;
            }
            case 18: {
              String s = input.readStringRequireUtf8();

              basePath_ = s;
              break;
            }
            case 24: {
              int rawValue = input.readEnum();

              modelType_ = rawValue;
              break;
            }
            case 34: {
              String s = input.readStringRequireUtf8();

              modelPlatform_ = s;
              break;
            }
            case 50: {
              LoggingConfigOuterClass.LoggingConfig.Builder subBuilder = null;
              if (loggingConfig_ != null) {
                subBuilder = loggingConfig_.toBuilder();
              }
              loggingConfig_ = input.readMessage(LoggingConfigOuterClass.LoggingConfig.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(loggingConfig_);
                loggingConfig_ = subBuilder.buildPartial();
              }

              break;
            }
            case 58: {
              FileSystemStoragePathSource.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Builder subBuilder = null;
              if (modelVersionPolicy_ != null) {
                subBuilder = modelVersionPolicy_.toBuilder();
              }
              modelVersionPolicy_ = input.readMessage(FileSystemStoragePathSource.FileSystemStoragePathSourceConfig.ServableVersionPolicy.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(modelVersionPolicy_);
                modelVersionPolicy_ = subBuilder.buildPartial();
              }

              break;
            }
            case 66: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                versionLabels_ = com.google.protobuf.MapField.newMapField(
                    VersionLabelsDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000001;
              }
              com.google.protobuf.MapEntry<String, Long>
              versionLabels__ = input.readMessage(
                  VersionLabelsDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              versionLabels_.getMutableMap().put(
                  versionLabels__.getKey(), versionLabels__.getValue());
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return ModelServerConfigOuterClass.internal_static_tensorflow_serving_ModelConfig_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    @Override
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 8:
          return internalGetVersionLabels();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return ModelServerConfigOuterClass.internal_static_tensorflow_serving_ModelConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              ModelServerConfigOuterClass.ModelConfig.class, ModelServerConfigOuterClass.ModelConfig.Builder.class);
    }

    public static final int NAME_FIELD_NUMBER = 1;
    private volatile Object name_;
    /**
     * <pre>
     * Name of the model.
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    public String getName() {
      Object ref = name_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        name_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Name of the model.
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      Object ref = name_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int BASE_PATH_FIELD_NUMBER = 2;
    private volatile Object basePath_;
    /**
     * <pre>
     * Base path to the model, excluding the version directory.
     * E.g&gt; for a model at /foo/bar/my_model/123, where 123 is the version, the
     * base path is /foo/bar/my_model.
     * (This can be changed once a model is in serving, *if* the underlying data
     * remains the same. Otherwise there are no guarantees about whether the old
     * or new data will be used for model versions currently loaded.)
     * </pre>
     *
     * <code>string base_path = 2;</code>
     */
    public String getBasePath() {
      Object ref = basePath_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        basePath_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Base path to the model, excluding the version directory.
     * E.g&gt; for a model at /foo/bar/my_model/123, where 123 is the version, the
     * base path is /foo/bar/my_model.
     * (This can be changed once a model is in serving, *if* the underlying data
     * remains the same. Otherwise there are no guarantees about whether the old
     * or new data will be used for model versions currently loaded.)
     * </pre>
     *
     * <code>string base_path = 2;</code>
     */
    public com.google.protobuf.ByteString
        getBasePathBytes() {
      Object ref = basePath_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        basePath_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int MODEL_TYPE_FIELD_NUMBER = 3;
    private int modelType_;
    /**
     * <pre>
     * Type of model.
     * TODO(b/31336131): DEPRECATED. Please use 'model_platform' instead.
     * </pre>
     *
     * <code>.tensorflow.serving.ModelType model_type = 3 [deprecated = true];</code>
     */
    @Deprecated public int getModelTypeValue() {
      return modelType_;
    }
    /**
     * <pre>
     * Type of model.
     * TODO(b/31336131): DEPRECATED. Please use 'model_platform' instead.
     * </pre>
     *
     * <code>.tensorflow.serving.ModelType model_type = 3 [deprecated = true];</code>
     */
    @Deprecated public ModelServerConfigOuterClass.ModelType getModelType() {
      @SuppressWarnings("deprecation")
      ModelServerConfigOuterClass.ModelType result = ModelServerConfigOuterClass.ModelType.valueOf(modelType_);
      return result == null ? ModelServerConfigOuterClass.ModelType.UNRECOGNIZED : result;
    }

    public static final int MODEL_PLATFORM_FIELD_NUMBER = 4;
    private volatile Object modelPlatform_;
    /**
     * <pre>
     * Type of model (e.g. "tensorflow").
     * (This cannot be changed once a model is in serving.)
     * </pre>
     *
     * <code>string model_platform = 4;</code>
     */
    public String getModelPlatform() {
      Object ref = modelPlatform_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        modelPlatform_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Type of model (e.g. "tensorflow").
     * (This cannot be changed once a model is in serving.)
     * </pre>
     *
     * <code>string model_platform = 4;</code>
     */
    public com.google.protobuf.ByteString
        getModelPlatformBytes() {
      Object ref = modelPlatform_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        modelPlatform_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int MODEL_VERSION_POLICY_FIELD_NUMBER = 7;
    private FileSystemStoragePathSource.FileSystemStoragePathSourceConfig.ServableVersionPolicy modelVersionPolicy_;
    /**
     * <pre>
     * Version policy for the model indicating which version(s) of the model to
     * load and make available for serving simultaneously.
     * The default option is to serve only the latest version of the model.
     * (This can be changed once a model is in serving.)
     * </pre>
     *
     * <code>.tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy model_version_policy = 7;</code>
     */
    public boolean hasModelVersionPolicy() {
      return modelVersionPolicy_ != null;
    }
    /**
     * <pre>
     * Version policy for the model indicating which version(s) of the model to
     * load and make available for serving simultaneously.
     * The default option is to serve only the latest version of the model.
     * (This can be changed once a model is in serving.)
     * </pre>
     *
     * <code>.tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy model_version_policy = 7;</code>
     */
    public FileSystemStoragePathSource.FileSystemStoragePathSourceConfig.ServableVersionPolicy getModelVersionPolicy() {
      return modelVersionPolicy_ == null ? FileSystemStoragePathSource.FileSystemStoragePathSourceConfig.ServableVersionPolicy.getDefaultInstance() : modelVersionPolicy_;
    }
    /**
     * <pre>
     * Version policy for the model indicating which version(s) of the model to
     * load and make available for serving simultaneously.
     * The default option is to serve only the latest version of the model.
     * (This can be changed once a model is in serving.)
     * </pre>
     *
     * <code>.tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy model_version_policy = 7;</code>
     */
    public FileSystemStoragePathSource.FileSystemStoragePathSourceConfig.ServableVersionPolicyOrBuilder getModelVersionPolicyOrBuilder() {
      return getModelVersionPolicy();
    }

    public static final int VERSION_LABELS_FIELD_NUMBER = 8;
    private static final class VersionLabelsDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          String, Long> defaultEntry =
              com.google.protobuf.MapEntry
              .<String, Long>newDefaultInstance(
                  ModelServerConfigOuterClass.internal_static_tensorflow_serving_ModelConfig_VersionLabelsEntry_descriptor,
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.INT64,
                  0L);
    }
    private com.google.protobuf.MapField<
        String, Long> versionLabels_;
    private com.google.protobuf.MapField<String, Long>
    internalGetVersionLabels() {
      if (versionLabels_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            VersionLabelsDefaultEntryHolder.defaultEntry);
      }
      return versionLabels_;
    }

    public int getVersionLabelsCount() {
      return internalGetVersionLabels().getMap().size();
    }
    /**
     * <pre>
     * String labels to associate with versions of the model, allowing inference
     * queries to refer to versions by label instead of number. Multiple labels
     * can map to the same version, but not vice-versa.
     * An envisioned use-case for these labels is canarying tentative versions.
     * For example, one can assign labels "stable" and "canary" to two specific
     * versions. Perhaps initially "stable" is assigned to version 0 and "canary"
     * to version 1. Once version 1 passes canary, one can shift the "stable"
     * label to refer to version 1 (at that point both labels map to the same
     * version -- version 1 -- which is fine). Later once version 2 is ready to
     * canary one can move the "canary" label to version 2. And so on.
     * </pre>
     *
     * <code>map&lt;string, int64&gt; version_labels = 8;</code>
     */

    public boolean containsVersionLabels(
        String key) {
      if (key == null) { throw new NullPointerException(); }
      return internalGetVersionLabels().getMap().containsKey(key);
    }
    /**
     * Use {@link #getVersionLabelsMap()} instead.
     */
    @Deprecated
    public java.util.Map<String, Long> getVersionLabels() {
      return getVersionLabelsMap();
    }
    /**
     * <pre>
     * String labels to associate with versions of the model, allowing inference
     * queries to refer to versions by label instead of number. Multiple labels
     * can map to the same version, but not vice-versa.
     * An envisioned use-case for these labels is canarying tentative versions.
     * For example, one can assign labels "stable" and "canary" to two specific
     * versions. Perhaps initially "stable" is assigned to version 0 and "canary"
     * to version 1. Once version 1 passes canary, one can shift the "stable"
     * label to refer to version 1 (at that point both labels map to the same
     * version -- version 1 -- which is fine). Later once version 2 is ready to
     * canary one can move the "canary" label to version 2. And so on.
     * </pre>
     *
     * <code>map&lt;string, int64&gt; version_labels = 8;</code>
     */

    public java.util.Map<String, Long> getVersionLabelsMap() {
      return internalGetVersionLabels().getMap();
    }
    /**
     * <pre>
     * String labels to associate with versions of the model, allowing inference
     * queries to refer to versions by label instead of number. Multiple labels
     * can map to the same version, but not vice-versa.
     * An envisioned use-case for these labels is canarying tentative versions.
     * For example, one can assign labels "stable" and "canary" to two specific
     * versions. Perhaps initially "stable" is assigned to version 0 and "canary"
     * to version 1. Once version 1 passes canary, one can shift the "stable"
     * label to refer to version 1 (at that point both labels map to the same
     * version -- version 1 -- which is fine). Later once version 2 is ready to
     * canary one can move the "canary" label to version 2. And so on.
     * </pre>
     *
     * <code>map&lt;string, int64&gt; version_labels = 8;</code>
     */

    public long getVersionLabelsOrDefault(
        String key,
        long defaultValue) {
      if (key == null) { throw new NullPointerException(); }
      java.util.Map<String, Long> map =
          internalGetVersionLabels().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * String labels to associate with versions of the model, allowing inference
     * queries to refer to versions by label instead of number. Multiple labels
     * can map to the same version, but not vice-versa.
     * An envisioned use-case for these labels is canarying tentative versions.
     * For example, one can assign labels "stable" and "canary" to two specific
     * versions. Perhaps initially "stable" is assigned to version 0 and "canary"
     * to version 1. Once version 1 passes canary, one can shift the "stable"
     * label to refer to version 1 (at that point both labels map to the same
     * version -- version 1 -- which is fine). Later once version 2 is ready to
     * canary one can move the "canary" label to version 2. And so on.
     * </pre>
     *
     * <code>map&lt;string, int64&gt; version_labels = 8;</code>
     */

    public long getVersionLabelsOrThrow(
        String key) {
      if (key == null) { throw new NullPointerException(); }
      java.util.Map<String, Long> map =
          internalGetVersionLabels().getMap();
      if (!map.containsKey(key)) {
        throw new IllegalArgumentException();
      }
      return map.get(key);
    }

    public static final int LOGGING_CONFIG_FIELD_NUMBER = 6;
    private LoggingConfigOuterClass.LoggingConfig loggingConfig_;
    /**
     * <pre>
     * Configures logging requests and responses, to the model.
     * (This can be changed once a model is in serving.)
     * </pre>
     *
     * <code>.tensorflow.serving.LoggingConfig logging_config = 6;</code>
     */
    public boolean hasLoggingConfig() {
      return loggingConfig_ != null;
    }
    /**
     * <pre>
     * Configures logging requests and responses, to the model.
     * (This can be changed once a model is in serving.)
     * </pre>
     *
     * <code>.tensorflow.serving.LoggingConfig logging_config = 6;</code>
     */
    public LoggingConfigOuterClass.LoggingConfig getLoggingConfig() {
      return loggingConfig_ == null ? LoggingConfigOuterClass.LoggingConfig.getDefaultInstance() : loggingConfig_;
    }
    /**
     * <pre>
     * Configures logging requests and responses, to the model.
     * (This can be changed once a model is in serving.)
     * </pre>
     *
     * <code>.tensorflow.serving.LoggingConfig logging_config = 6;</code>
     */
    public LoggingConfigOuterClass.LoggingConfigOrBuilder getLoggingConfigOrBuilder() {
      return getLoggingConfig();
    }

    private byte memoizedIsInitialized = -1;
    @Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getNameBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
      }
      if (!getBasePathBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, basePath_);
      }
      if (modelType_ != ModelServerConfigOuterClass.ModelType.MODEL_TYPE_UNSPECIFIED.getNumber()) {
        output.writeEnum(3, modelType_);
      }
      if (!getModelPlatformBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 4, modelPlatform_);
      }
      if (loggingConfig_ != null) {
        output.writeMessage(6, getLoggingConfig());
      }
      if (modelVersionPolicy_ != null) {
        output.writeMessage(7, getModelVersionPolicy());
      }
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetVersionLabels(),
          VersionLabelsDefaultEntryHolder.defaultEntry,
          8);
      unknownFields.writeTo(output);
    }

    @Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getNameBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
      }
      if (!getBasePathBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, basePath_);
      }
      if (modelType_ != ModelServerConfigOuterClass.ModelType.MODEL_TYPE_UNSPECIFIED.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, modelType_);
      }
      if (!getModelPlatformBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, modelPlatform_);
      }
      if (loggingConfig_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, getLoggingConfig());
      }
      if (modelVersionPolicy_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, getModelVersionPolicy());
      }
      for (java.util.Map.Entry<String, Long> entry
           : internalGetVersionLabels().getMap().entrySet()) {
        com.google.protobuf.MapEntry<String, Long>
        versionLabels__ = VersionLabelsDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(8, versionLabels__);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof ModelServerConfigOuterClass.ModelConfig)) {
        return super.equals(obj);
      }
      ModelServerConfigOuterClass.ModelConfig other = (ModelServerConfigOuterClass.ModelConfig) obj;

      if (!getName()
          .equals(other.getName())) return false;
      if (!getBasePath()
          .equals(other.getBasePath())) return false;
      if (modelType_ != other.modelType_) return false;
      if (!getModelPlatform()
          .equals(other.getModelPlatform())) return false;
      if (hasModelVersionPolicy() != other.hasModelVersionPolicy()) return false;
      if (hasModelVersionPolicy()) {
        if (!getModelVersionPolicy()
            .equals(other.getModelVersionPolicy())) return false;
      }
      if (!internalGetVersionLabels().equals(
          other.internalGetVersionLabels())) return false;
      if (hasLoggingConfig() != other.hasLoggingConfig()) return false;
      if (hasLoggingConfig()) {
        if (!getLoggingConfig()
            .equals(other.getLoggingConfig())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + NAME_FIELD_NUMBER;
      hash = (53 * hash) + getName().hashCode();
      hash = (37 * hash) + BASE_PATH_FIELD_NUMBER;
      hash = (53 * hash) + getBasePath().hashCode();
      hash = (37 * hash) + MODEL_TYPE_FIELD_NUMBER;
      hash = (53 * hash) + modelType_;
      hash = (37 * hash) + MODEL_PLATFORM_FIELD_NUMBER;
      hash = (53 * hash) + getModelPlatform().hashCode();
      if (hasModelVersionPolicy()) {
        hash = (37 * hash) + MODEL_VERSION_POLICY_FIELD_NUMBER;
        hash = (53 * hash) + getModelVersionPolicy().hashCode();
      }
      if (!internalGetVersionLabels().getMap().isEmpty()) {
        hash = (37 * hash) + VERSION_LABELS_FIELD_NUMBER;
        hash = (53 * hash) + internalGetVersionLabels().hashCode();
      }
      if (hasLoggingConfig()) {
        hash = (37 * hash) + LOGGING_CONFIG_FIELD_NUMBER;
        hash = (53 * hash) + getLoggingConfig().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static ModelServerConfigOuterClass.ModelConfig parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ModelServerConfigOuterClass.ModelConfig parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ModelServerConfigOuterClass.ModelConfig parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ModelServerConfigOuterClass.ModelConfig parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ModelServerConfigOuterClass.ModelConfig parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ModelServerConfigOuterClass.ModelConfig parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ModelServerConfigOuterClass.ModelConfig parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static ModelServerConfigOuterClass.ModelConfig parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static ModelServerConfigOuterClass.ModelConfig parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static ModelServerConfigOuterClass.ModelConfig parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static ModelServerConfigOuterClass.ModelConfig parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static ModelServerConfigOuterClass.ModelConfig parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(ModelServerConfigOuterClass.ModelConfig prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Common configuration for loading a model being served.
     * </pre>
     *
     * Protobuf type {@code tensorflow.serving.ModelConfig}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:tensorflow.serving.ModelConfig)
        ModelServerConfigOuterClass.ModelConfigOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ModelServerConfigOuterClass.internal_static_tensorflow_serving_ModelConfig_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(
          int number) {
        switch (number) {
          case 8:
            return internalGetVersionLabels();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(
          int number) {
        switch (number) {
          case 8:
            return internalGetMutableVersionLabels();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @Override
      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ModelServerConfigOuterClass.internal_static_tensorflow_serving_ModelConfig_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ModelServerConfigOuterClass.ModelConfig.class, ModelServerConfigOuterClass.ModelConfig.Builder.class);
      }

      // Construct using tensorflow.serving.ModelServerConfigOuterClass.ModelConfig.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @Override
      public Builder clear() {
        super.clear();
        name_ = "";

        basePath_ = "";

        modelType_ = 0;

        modelPlatform_ = "";

        if (modelVersionPolicyBuilder_ == null) {
          modelVersionPolicy_ = null;
        } else {
          modelVersionPolicy_ = null;
          modelVersionPolicyBuilder_ = null;
        }
        internalGetMutableVersionLabels().clear();
        if (loggingConfigBuilder_ == null) {
          loggingConfig_ = null;
        } else {
          loggingConfig_ = null;
          loggingConfigBuilder_ = null;
        }
        return this;
      }

      @Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return ModelServerConfigOuterClass.internal_static_tensorflow_serving_ModelConfig_descriptor;
      }

      @Override
      public ModelServerConfigOuterClass.ModelConfig getDefaultInstanceForType() {
        return ModelServerConfigOuterClass.ModelConfig.getDefaultInstance();
      }

      @Override
      public ModelServerConfigOuterClass.ModelConfig build() {
        ModelServerConfigOuterClass.ModelConfig result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @Override
      public ModelServerConfigOuterClass.ModelConfig buildPartial() {
        ModelServerConfigOuterClass.ModelConfig result = new ModelServerConfigOuterClass.ModelConfig(this);
        int from_bitField0_ = bitField0_;
        result.name_ = name_;
        result.basePath_ = basePath_;
        result.modelType_ = modelType_;
        result.modelPlatform_ = modelPlatform_;
        if (modelVersionPolicyBuilder_ == null) {
          result.modelVersionPolicy_ = modelVersionPolicy_;
        } else {
          result.modelVersionPolicy_ = modelVersionPolicyBuilder_.build();
        }
        result.versionLabels_ = internalGetVersionLabels();
        result.versionLabels_.makeImmutable();
        if (loggingConfigBuilder_ == null) {
          result.loggingConfig_ = loggingConfig_;
        } else {
          result.loggingConfig_ = loggingConfigBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @Override
      public Builder clone() {
        return super.clone();
      }
      @Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.setField(field, value);
      }
      @Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.addRepeatedField(field, value);
      }
      @Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof ModelServerConfigOuterClass.ModelConfig) {
          return mergeFrom((ModelServerConfigOuterClass.ModelConfig)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(ModelServerConfigOuterClass.ModelConfig other) {
        if (other == ModelServerConfigOuterClass.ModelConfig.getDefaultInstance()) return this;
        if (!other.getName().isEmpty()) {
          name_ = other.name_;
          onChanged();
        }
        if (!other.getBasePath().isEmpty()) {
          basePath_ = other.basePath_;
          onChanged();
        }
        if (other.modelType_ != 0) {
          setModelTypeValue(other.getModelTypeValue());
        }
        if (!other.getModelPlatform().isEmpty()) {
          modelPlatform_ = other.modelPlatform_;
          onChanged();
        }
        if (other.hasModelVersionPolicy()) {
          mergeModelVersionPolicy(other.getModelVersionPolicy());
        }
        internalGetMutableVersionLabels().mergeFrom(
            other.internalGetVersionLabels());
        if (other.hasLoggingConfig()) {
          mergeLoggingConfig(other.getLoggingConfig());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @Override
      public final boolean isInitialized() {
        return true;
      }

      @Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        ModelServerConfigOuterClass.ModelConfig parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (ModelServerConfigOuterClass.ModelConfig) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private Object name_ = "";
      /**
       * <pre>
       * Name of the model.
       * </pre>
       *
       * <code>string name = 1;</code>
       */
      public String getName() {
        Object ref = name_;
        if (!(ref instanceof String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          String s = bs.toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      /**
       * <pre>
       * Name of the model.
       * </pre>
       *
       * <code>string name = 1;</code>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Name of the model.
       * </pre>
       *
       * <code>string name = 1;</code>
       */
      public Builder setName(
          String value) {
        if (value == null) {
    throw new NullPointerException();
  }

        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Name of the model.
       * </pre>
       *
       * <code>string name = 1;</code>
       */
      public Builder clearName() {

        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Name of the model.
       * </pre>
       *
       * <code>string name = 1;</code>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);

        name_ = value;
        onChanged();
        return this;
      }

      private Object basePath_ = "";
      /**
       * <pre>
       * Base path to the model, excluding the version directory.
       * E.g&gt; for a model at /foo/bar/my_model/123, where 123 is the version, the
       * base path is /foo/bar/my_model.
       * (This can be changed once a model is in serving, *if* the underlying data
       * remains the same. Otherwise there are no guarantees about whether the old
       * or new data will be used for model versions currently loaded.)
       * </pre>
       *
       * <code>string base_path = 2;</code>
       */
      public String getBasePath() {
        Object ref = basePath_;
        if (!(ref instanceof String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          String s = bs.toStringUtf8();
          basePath_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      /**
       * <pre>
       * Base path to the model, excluding the version directory.
       * E.g&gt; for a model at /foo/bar/my_model/123, where 123 is the version, the
       * base path is /foo/bar/my_model.
       * (This can be changed once a model is in serving, *if* the underlying data
       * remains the same. Otherwise there are no guarantees about whether the old
       * or new data will be used for model versions currently loaded.)
       * </pre>
       *
       * <code>string base_path = 2;</code>
       */
      public com.google.protobuf.ByteString
          getBasePathBytes() {
        Object ref = basePath_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (String) ref);
          basePath_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Base path to the model, excluding the version directory.
       * E.g&gt; for a model at /foo/bar/my_model/123, where 123 is the version, the
       * base path is /foo/bar/my_model.
       * (This can be changed once a model is in serving, *if* the underlying data
       * remains the same. Otherwise there are no guarantees about whether the old
       * or new data will be used for model versions currently loaded.)
       * </pre>
       *
       * <code>string base_path = 2;</code>
       */
      public Builder setBasePath(
          String value) {
        if (value == null) {
    throw new NullPointerException();
  }

        basePath_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Base path to the model, excluding the version directory.
       * E.g&gt; for a model at /foo/bar/my_model/123, where 123 is the version, the
       * base path is /foo/bar/my_model.
       * (This can be changed once a model is in serving, *if* the underlying data
       * remains the same. Otherwise there are no guarantees about whether the old
       * or new data will be used for model versions currently loaded.)
       * </pre>
       *
       * <code>string base_path = 2;</code>
       */
      public Builder clearBasePath() {

        basePath_ = getDefaultInstance().getBasePath();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Base path to the model, excluding the version directory.
       * E.g&gt; for a model at /foo/bar/my_model/123, where 123 is the version, the
       * base path is /foo/bar/my_model.
       * (This can be changed once a model is in serving, *if* the underlying data
       * remains the same. Otherwise there are no guarantees about whether the old
       * or new data will be used for model versions currently loaded.)
       * </pre>
       *
       * <code>string base_path = 2;</code>
       */
      public Builder setBasePathBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);

        basePath_ = value;
        onChanged();
        return this;
      }

      private int modelType_ = 0;
      /**
       * <pre>
       * Type of model.
       * TODO(b/31336131): DEPRECATED. Please use 'model_platform' instead.
       * </pre>
       *
       * <code>.tensorflow.serving.ModelType model_type = 3 [deprecated = true];</code>
       */
      @Deprecated public int getModelTypeValue() {
        return modelType_;
      }
      /**
       * <pre>
       * Type of model.
       * TODO(b/31336131): DEPRECATED. Please use 'model_platform' instead.
       * </pre>
       *
       * <code>.tensorflow.serving.ModelType model_type = 3 [deprecated = true];</code>
       */
      @Deprecated public Builder setModelTypeValue(int value) {
        modelType_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Type of model.
       * TODO(b/31336131): DEPRECATED. Please use 'model_platform' instead.
       * </pre>
       *
       * <code>.tensorflow.serving.ModelType model_type = 3 [deprecated = true];</code>
       */
      @Deprecated public ModelServerConfigOuterClass.ModelType getModelType() {
        @SuppressWarnings("deprecation")
        ModelServerConfigOuterClass.ModelType result = ModelServerConfigOuterClass.ModelType.valueOf(modelType_);
        return result == null ? ModelServerConfigOuterClass.ModelType.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * Type of model.
       * TODO(b/31336131): DEPRECATED. Please use 'model_platform' instead.
       * </pre>
       *
       * <code>.tensorflow.serving.ModelType model_type = 3 [deprecated = true];</code>
       */
      @Deprecated public Builder setModelType(ModelServerConfigOuterClass.ModelType value) {
        if (value == null) {
          throw new NullPointerException();
        }

        modelType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Type of model.
       * TODO(b/31336131): DEPRECATED. Please use 'model_platform' instead.
       * </pre>
       *
       * <code>.tensorflow.serving.ModelType model_type = 3 [deprecated = true];</code>
       */
      @Deprecated public Builder clearModelType() {

        modelType_ = 0;
        onChanged();
        return this;
      }

      private Object modelPlatform_ = "";
      /**
       * <pre>
       * Type of model (e.g. "tensorflow").
       * (This cannot be changed once a model is in serving.)
       * </pre>
       *
       * <code>string model_platform = 4;</code>
       */
      public String getModelPlatform() {
        Object ref = modelPlatform_;
        if (!(ref instanceof String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          String s = bs.toStringUtf8();
          modelPlatform_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      /**
       * <pre>
       * Type of model (e.g. "tensorflow").
       * (This cannot be changed once a model is in serving.)
       * </pre>
       *
       * <code>string model_platform = 4;</code>
       */
      public com.google.protobuf.ByteString
          getModelPlatformBytes() {
        Object ref = modelPlatform_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (String) ref);
          modelPlatform_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Type of model (e.g. "tensorflow").
       * (This cannot be changed once a model is in serving.)
       * </pre>
       *
       * <code>string model_platform = 4;</code>
       */
      public Builder setModelPlatform(
          String value) {
        if (value == null) {
    throw new NullPointerException();
  }

        modelPlatform_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Type of model (e.g. "tensorflow").
       * (This cannot be changed once a model is in serving.)
       * </pre>
       *
       * <code>string model_platform = 4;</code>
       */
      public Builder clearModelPlatform() {

        modelPlatform_ = getDefaultInstance().getModelPlatform();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Type of model (e.g. "tensorflow").
       * (This cannot be changed once a model is in serving.)
       * </pre>
       *
       * <code>string model_platform = 4;</code>
       */
      public Builder setModelPlatformBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);

        modelPlatform_ = value;
        onChanged();
        return this;
      }

      private FileSystemStoragePathSource.FileSystemStoragePathSourceConfig.ServableVersionPolicy modelVersionPolicy_;
      private com.google.protobuf.SingleFieldBuilderV3<
          FileSystemStoragePathSource.FileSystemStoragePathSourceConfig.ServableVersionPolicy, FileSystemStoragePathSource.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Builder, FileSystemStoragePathSource.FileSystemStoragePathSourceConfig.ServableVersionPolicyOrBuilder> modelVersionPolicyBuilder_;
      /**
       * <pre>
       * Version policy for the model indicating which version(s) of the model to
       * load and make available for serving simultaneously.
       * The default option is to serve only the latest version of the model.
       * (This can be changed once a model is in serving.)
       * </pre>
       *
       * <code>.tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy model_version_policy = 7;</code>
       */
      public boolean hasModelVersionPolicy() {
        return modelVersionPolicyBuilder_ != null || modelVersionPolicy_ != null;
      }
      /**
       * <pre>
       * Version policy for the model indicating which version(s) of the model to
       * load and make available for serving simultaneously.
       * The default option is to serve only the latest version of the model.
       * (This can be changed once a model is in serving.)
       * </pre>
       *
       * <code>.tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy model_version_policy = 7;</code>
       */
      public FileSystemStoragePathSource.FileSystemStoragePathSourceConfig.ServableVersionPolicy getModelVersionPolicy() {
        if (modelVersionPolicyBuilder_ == null) {
          return modelVersionPolicy_ == null ? FileSystemStoragePathSource.FileSystemStoragePathSourceConfig.ServableVersionPolicy.getDefaultInstance() : modelVersionPolicy_;
        } else {
          return modelVersionPolicyBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Version policy for the model indicating which version(s) of the model to
       * load and make available for serving simultaneously.
       * The default option is to serve only the latest version of the model.
       * (This can be changed once a model is in serving.)
       * </pre>
       *
       * <code>.tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy model_version_policy = 7;</code>
       */
      public Builder setModelVersionPolicy(FileSystemStoragePathSource.FileSystemStoragePathSourceConfig.ServableVersionPolicy value) {
        if (modelVersionPolicyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          modelVersionPolicy_ = value;
          onChanged();
        } else {
          modelVersionPolicyBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Version policy for the model indicating which version(s) of the model to
       * load and make available for serving simultaneously.
       * The default option is to serve only the latest version of the model.
       * (This can be changed once a model is in serving.)
       * </pre>
       *
       * <code>.tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy model_version_policy = 7;</code>
       */
      public Builder setModelVersionPolicy(
          FileSystemStoragePathSource.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Builder builderForValue) {
        if (modelVersionPolicyBuilder_ == null) {
          modelVersionPolicy_ = builderForValue.build();
          onChanged();
        } else {
          modelVersionPolicyBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Version policy for the model indicating which version(s) of the model to
       * load and make available for serving simultaneously.
       * The default option is to serve only the latest version of the model.
       * (This can be changed once a model is in serving.)
       * </pre>
       *
       * <code>.tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy model_version_policy = 7;</code>
       */
      public Builder mergeModelVersionPolicy(FileSystemStoragePathSource.FileSystemStoragePathSourceConfig.ServableVersionPolicy value) {
        if (modelVersionPolicyBuilder_ == null) {
          if (modelVersionPolicy_ != null) {
            modelVersionPolicy_ =
              FileSystemStoragePathSource.FileSystemStoragePathSourceConfig.ServableVersionPolicy.newBuilder(modelVersionPolicy_).mergeFrom(value).buildPartial();
          } else {
            modelVersionPolicy_ = value;
          }
          onChanged();
        } else {
          modelVersionPolicyBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Version policy for the model indicating which version(s) of the model to
       * load and make available for serving simultaneously.
       * The default option is to serve only the latest version of the model.
       * (This can be changed once a model is in serving.)
       * </pre>
       *
       * <code>.tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy model_version_policy = 7;</code>
       */
      public Builder clearModelVersionPolicy() {
        if (modelVersionPolicyBuilder_ == null) {
          modelVersionPolicy_ = null;
          onChanged();
        } else {
          modelVersionPolicy_ = null;
          modelVersionPolicyBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Version policy for the model indicating which version(s) of the model to
       * load and make available for serving simultaneously.
       * The default option is to serve only the latest version of the model.
       * (This can be changed once a model is in serving.)
       * </pre>
       *
       * <code>.tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy model_version_policy = 7;</code>
       */
      public FileSystemStoragePathSource.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Builder getModelVersionPolicyBuilder() {

        onChanged();
        return getModelVersionPolicyFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Version policy for the model indicating which version(s) of the model to
       * load and make available for serving simultaneously.
       * The default option is to serve only the latest version of the model.
       * (This can be changed once a model is in serving.)
       * </pre>
       *
       * <code>.tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy model_version_policy = 7;</code>
       */
      public FileSystemStoragePathSource.FileSystemStoragePathSourceConfig.ServableVersionPolicyOrBuilder getModelVersionPolicyOrBuilder() {
        if (modelVersionPolicyBuilder_ != null) {
          return modelVersionPolicyBuilder_.getMessageOrBuilder();
        } else {
          return modelVersionPolicy_ == null ?
              FileSystemStoragePathSource.FileSystemStoragePathSourceConfig.ServableVersionPolicy.getDefaultInstance() : modelVersionPolicy_;
        }
      }
      /**
       * <pre>
       * Version policy for the model indicating which version(s) of the model to
       * load and make available for serving simultaneously.
       * The default option is to serve only the latest version of the model.
       * (This can be changed once a model is in serving.)
       * </pre>
       *
       * <code>.tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy model_version_policy = 7;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          FileSystemStoragePathSource.FileSystemStoragePathSourceConfig.ServableVersionPolicy, FileSystemStoragePathSource.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Builder, FileSystemStoragePathSource.FileSystemStoragePathSourceConfig.ServableVersionPolicyOrBuilder>
          getModelVersionPolicyFieldBuilder() {
        if (modelVersionPolicyBuilder_ == null) {
          modelVersionPolicyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              FileSystemStoragePathSource.FileSystemStoragePathSourceConfig.ServableVersionPolicy, FileSystemStoragePathSource.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Builder, FileSystemStoragePathSource.FileSystemStoragePathSourceConfig.ServableVersionPolicyOrBuilder>(
                  getModelVersionPolicy(),
                  getParentForChildren(),
                  isClean());
          modelVersionPolicy_ = null;
        }
        return modelVersionPolicyBuilder_;
      }

      private com.google.protobuf.MapField<
          String, Long> versionLabels_;
      private com.google.protobuf.MapField<String, Long>
      internalGetVersionLabels() {
        if (versionLabels_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              VersionLabelsDefaultEntryHolder.defaultEntry);
        }
        return versionLabels_;
      }
      private com.google.protobuf.MapField<String, Long>
      internalGetMutableVersionLabels() {
        onChanged();;
        if (versionLabels_ == null) {
          versionLabels_ = com.google.protobuf.MapField.newMapField(
              VersionLabelsDefaultEntryHolder.defaultEntry);
        }
        if (!versionLabels_.isMutable()) {
          versionLabels_ = versionLabels_.copy();
        }
        return versionLabels_;
      }

      public int getVersionLabelsCount() {
        return internalGetVersionLabels().getMap().size();
      }
      /**
       * <pre>
       * String labels to associate with versions of the model, allowing inference
       * queries to refer to versions by label instead of number. Multiple labels
       * can map to the same version, but not vice-versa.
       * An envisioned use-case for these labels is canarying tentative versions.
       * For example, one can assign labels "stable" and "canary" to two specific
       * versions. Perhaps initially "stable" is assigned to version 0 and "canary"
       * to version 1. Once version 1 passes canary, one can shift the "stable"
       * label to refer to version 1 (at that point both labels map to the same
       * version -- version 1 -- which is fine). Later once version 2 is ready to
       * canary one can move the "canary" label to version 2. And so on.
       * </pre>
       *
       * <code>map&lt;string, int64&gt; version_labels = 8;</code>
       */

      public boolean containsVersionLabels(
          String key) {
        if (key == null) { throw new NullPointerException(); }
        return internalGetVersionLabels().getMap().containsKey(key);
      }
      /**
       * Use {@link #getVersionLabelsMap()} instead.
       */
      @Deprecated
      public java.util.Map<String, Long> getVersionLabels() {
        return getVersionLabelsMap();
      }
      /**
       * <pre>
       * String labels to associate with versions of the model, allowing inference
       * queries to refer to versions by label instead of number. Multiple labels
       * can map to the same version, but not vice-versa.
       * An envisioned use-case for these labels is canarying tentative versions.
       * For example, one can assign labels "stable" and "canary" to two specific
       * versions. Perhaps initially "stable" is assigned to version 0 and "canary"
       * to version 1. Once version 1 passes canary, one can shift the "stable"
       * label to refer to version 1 (at that point both labels map to the same
       * version -- version 1 -- which is fine). Later once version 2 is ready to
       * canary one can move the "canary" label to version 2. And so on.
       * </pre>
       *
       * <code>map&lt;string, int64&gt; version_labels = 8;</code>
       */

      public java.util.Map<String, Long> getVersionLabelsMap() {
        return internalGetVersionLabels().getMap();
      }
      /**
       * <pre>
       * String labels to associate with versions of the model, allowing inference
       * queries to refer to versions by label instead of number. Multiple labels
       * can map to the same version, but not vice-versa.
       * An envisioned use-case for these labels is canarying tentative versions.
       * For example, one can assign labels "stable" and "canary" to two specific
       * versions. Perhaps initially "stable" is assigned to version 0 and "canary"
       * to version 1. Once version 1 passes canary, one can shift the "stable"
       * label to refer to version 1 (at that point both labels map to the same
       * version -- version 1 -- which is fine). Later once version 2 is ready to
       * canary one can move the "canary" label to version 2. And so on.
       * </pre>
       *
       * <code>map&lt;string, int64&gt; version_labels = 8;</code>
       */

      public long getVersionLabelsOrDefault(
          String key,
          long defaultValue) {
        if (key == null) { throw new NullPointerException(); }
        java.util.Map<String, Long> map =
            internalGetVersionLabels().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       * String labels to associate with versions of the model, allowing inference
       * queries to refer to versions by label instead of number. Multiple labels
       * can map to the same version, but not vice-versa.
       * An envisioned use-case for these labels is canarying tentative versions.
       * For example, one can assign labels "stable" and "canary" to two specific
       * versions. Perhaps initially "stable" is assigned to version 0 and "canary"
       * to version 1. Once version 1 passes canary, one can shift the "stable"
       * label to refer to version 1 (at that point both labels map to the same
       * version -- version 1 -- which is fine). Later once version 2 is ready to
       * canary one can move the "canary" label to version 2. And so on.
       * </pre>
       *
       * <code>map&lt;string, int64&gt; version_labels = 8;</code>
       */

      public long getVersionLabelsOrThrow(
          String key) {
        if (key == null) { throw new NullPointerException(); }
        java.util.Map<String, Long> map =
            internalGetVersionLabels().getMap();
        if (!map.containsKey(key)) {
          throw new IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearVersionLabels() {
        internalGetMutableVersionLabels().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <pre>
       * String labels to associate with versions of the model, allowing inference
       * queries to refer to versions by label instead of number. Multiple labels
       * can map to the same version, but not vice-versa.
       * An envisioned use-case for these labels is canarying tentative versions.
       * For example, one can assign labels "stable" and "canary" to two specific
       * versions. Perhaps initially "stable" is assigned to version 0 and "canary"
       * to version 1. Once version 1 passes canary, one can shift the "stable"
       * label to refer to version 1 (at that point both labels map to the same
       * version -- version 1 -- which is fine). Later once version 2 is ready to
       * canary one can move the "canary" label to version 2. And so on.
       * </pre>
       *
       * <code>map&lt;string, int64&gt; version_labels = 8;</code>
       */

      public Builder removeVersionLabels(
          String key) {
        if (key == null) { throw new NullPointerException(); }
        internalGetMutableVersionLabels().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @Deprecated
      public java.util.Map<String, Long>
      getMutableVersionLabels() {
        return internalGetMutableVersionLabels().getMutableMap();
      }
      /**
       * <pre>
       * String labels to associate with versions of the model, allowing inference
       * queries to refer to versions by label instead of number. Multiple labels
       * can map to the same version, but not vice-versa.
       * An envisioned use-case for these labels is canarying tentative versions.
       * For example, one can assign labels "stable" and "canary" to two specific
       * versions. Perhaps initially "stable" is assigned to version 0 and "canary"
       * to version 1. Once version 1 passes canary, one can shift the "stable"
       * label to refer to version 1 (at that point both labels map to the same
       * version -- version 1 -- which is fine). Later once version 2 is ready to
       * canary one can move the "canary" label to version 2. And so on.
       * </pre>
       *
       * <code>map&lt;string, int64&gt; version_labels = 8;</code>
       */
      public Builder putVersionLabels(
          String key,
          long value) {
        if (key == null) { throw new NullPointerException(); }

        internalGetMutableVersionLabels().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <pre>
       * String labels to associate with versions of the model, allowing inference
       * queries to refer to versions by label instead of number. Multiple labels
       * can map to the same version, but not vice-versa.
       * An envisioned use-case for these labels is canarying tentative versions.
       * For example, one can assign labels "stable" and "canary" to two specific
       * versions. Perhaps initially "stable" is assigned to version 0 and "canary"
       * to version 1. Once version 1 passes canary, one can shift the "stable"
       * label to refer to version 1 (at that point both labels map to the same
       * version -- version 1 -- which is fine). Later once version 2 is ready to
       * canary one can move the "canary" label to version 2. And so on.
       * </pre>
       *
       * <code>map&lt;string, int64&gt; version_labels = 8;</code>
       */

      public Builder putAllVersionLabels(
          java.util.Map<String, Long> values) {
        internalGetMutableVersionLabels().getMutableMap()
            .putAll(values);
        return this;
      }

      private LoggingConfigOuterClass.LoggingConfig loggingConfig_;
      private com.google.protobuf.SingleFieldBuilderV3<
          LoggingConfigOuterClass.LoggingConfig, LoggingConfigOuterClass.LoggingConfig.Builder, LoggingConfigOuterClass.LoggingConfigOrBuilder> loggingConfigBuilder_;
      /**
       * <pre>
       * Configures logging requests and responses, to the model.
       * (This can be changed once a model is in serving.)
       * </pre>
       *
       * <code>.tensorflow.serving.LoggingConfig logging_config = 6;</code>
       */
      public boolean hasLoggingConfig() {
        return loggingConfigBuilder_ != null || loggingConfig_ != null;
      }
      /**
       * <pre>
       * Configures logging requests and responses, to the model.
       * (This can be changed once a model is in serving.)
       * </pre>
       *
       * <code>.tensorflow.serving.LoggingConfig logging_config = 6;</code>
       */
      public LoggingConfigOuterClass.LoggingConfig getLoggingConfig() {
        if (loggingConfigBuilder_ == null) {
          return loggingConfig_ == null ? LoggingConfigOuterClass.LoggingConfig.getDefaultInstance() : loggingConfig_;
        } else {
          return loggingConfigBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Configures logging requests and responses, to the model.
       * (This can be changed once a model is in serving.)
       * </pre>
       *
       * <code>.tensorflow.serving.LoggingConfig logging_config = 6;</code>
       */
      public Builder setLoggingConfig(LoggingConfigOuterClass.LoggingConfig value) {
        if (loggingConfigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          loggingConfig_ = value;
          onChanged();
        } else {
          loggingConfigBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Configures logging requests and responses, to the model.
       * (This can be changed once a model is in serving.)
       * </pre>
       *
       * <code>.tensorflow.serving.LoggingConfig logging_config = 6;</code>
       */
      public Builder setLoggingConfig(
          LoggingConfigOuterClass.LoggingConfig.Builder builderForValue) {
        if (loggingConfigBuilder_ == null) {
          loggingConfig_ = builderForValue.build();
          onChanged();
        } else {
          loggingConfigBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Configures logging requests and responses, to the model.
       * (This can be changed once a model is in serving.)
       * </pre>
       *
       * <code>.tensorflow.serving.LoggingConfig logging_config = 6;</code>
       */
      public Builder mergeLoggingConfig(LoggingConfigOuterClass.LoggingConfig value) {
        if (loggingConfigBuilder_ == null) {
          if (loggingConfig_ != null) {
            loggingConfig_ =
              LoggingConfigOuterClass.LoggingConfig.newBuilder(loggingConfig_).mergeFrom(value).buildPartial();
          } else {
            loggingConfig_ = value;
          }
          onChanged();
        } else {
          loggingConfigBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Configures logging requests and responses, to the model.
       * (This can be changed once a model is in serving.)
       * </pre>
       *
       * <code>.tensorflow.serving.LoggingConfig logging_config = 6;</code>
       */
      public Builder clearLoggingConfig() {
        if (loggingConfigBuilder_ == null) {
          loggingConfig_ = null;
          onChanged();
        } else {
          loggingConfig_ = null;
          loggingConfigBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Configures logging requests and responses, to the model.
       * (This can be changed once a model is in serving.)
       * </pre>
       *
       * <code>.tensorflow.serving.LoggingConfig logging_config = 6;</code>
       */
      public LoggingConfigOuterClass.LoggingConfig.Builder getLoggingConfigBuilder() {

        onChanged();
        return getLoggingConfigFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Configures logging requests and responses, to the model.
       * (This can be changed once a model is in serving.)
       * </pre>
       *
       * <code>.tensorflow.serving.LoggingConfig logging_config = 6;</code>
       */
      public LoggingConfigOuterClass.LoggingConfigOrBuilder getLoggingConfigOrBuilder() {
        if (loggingConfigBuilder_ != null) {
          return loggingConfigBuilder_.getMessageOrBuilder();
        } else {
          return loggingConfig_ == null ?
              LoggingConfigOuterClass.LoggingConfig.getDefaultInstance() : loggingConfig_;
        }
      }
      /**
       * <pre>
       * Configures logging requests and responses, to the model.
       * (This can be changed once a model is in serving.)
       * </pre>
       *
       * <code>.tensorflow.serving.LoggingConfig logging_config = 6;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          LoggingConfigOuterClass.LoggingConfig, LoggingConfigOuterClass.LoggingConfig.Builder, LoggingConfigOuterClass.LoggingConfigOrBuilder>
          getLoggingConfigFieldBuilder() {
        if (loggingConfigBuilder_ == null) {
          loggingConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              LoggingConfigOuterClass.LoggingConfig, LoggingConfigOuterClass.LoggingConfig.Builder, LoggingConfigOuterClass.LoggingConfigOrBuilder>(
                  getLoggingConfig(),
                  getParentForChildren(),
                  isClean());
          loggingConfig_ = null;
        }
        return loggingConfigBuilder_;
      }
      @Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:tensorflow.serving.ModelConfig)
    }

    // @@protoc_insertion_point(class_scope:tensorflow.serving.ModelConfig)
    private static final ModelServerConfigOuterClass.ModelConfig DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ModelServerConfigOuterClass.ModelConfig();
    }

    public static ModelServerConfigOuterClass.ModelConfig getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ModelConfig>
        PARSER = new com.google.protobuf.AbstractParser<ModelConfig>() {
      @Override
      public ModelConfig parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ModelConfig(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ModelConfig> parser() {
      return PARSER;
    }

    @Override
    public com.google.protobuf.Parser<ModelConfig> getParserForType() {
      return PARSER;
    }

    @Override
    public ModelServerConfigOuterClass.ModelConfig getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ModelConfigListOrBuilder extends
      // @@protoc_insertion_point(interface_extends:tensorflow.serving.ModelConfigList)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .tensorflow.serving.ModelConfig config = 1;</code>
     */
    java.util.List<ModelConfig>
        getConfigList();
    /**
     * <code>repeated .tensorflow.serving.ModelConfig config = 1;</code>
     */
    ModelServerConfigOuterClass.ModelConfig getConfig(int index);
    /**
     * <code>repeated .tensorflow.serving.ModelConfig config = 1;</code>
     */
    int getConfigCount();
    /**
     * <code>repeated .tensorflow.serving.ModelConfig config = 1;</code>
     */
    java.util.List<? extends ModelConfigOrBuilder>
        getConfigOrBuilderList();
    /**
     * <code>repeated .tensorflow.serving.ModelConfig config = 1;</code>
     */
    ModelServerConfigOuterClass.ModelConfigOrBuilder getConfigOrBuilder(
            int index);
  }
  /**
   * <pre>
   * Static list of models to be loaded for serving.
   * </pre>
   *
   * Protobuf type {@code tensorflow.serving.ModelConfigList}
   */
  public  static final class ModelConfigList extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:tensorflow.serving.ModelConfigList)
      ModelConfigListOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ModelConfigList.newBuilder() to construct.
    private ModelConfigList(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ModelConfigList() {
      config_ = java.util.Collections.emptyList();
    }

    @Override
    @SuppressWarnings({"unused"})
    protected Object newInstance(
        UnusedPrivateParameter unused) {
      return new ModelConfigList();
    }

    @Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ModelConfigList(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                config_ = new java.util.ArrayList<ModelConfig>();
                mutable_bitField0_ |= 0x00000001;
              }
              config_.add(
                  input.readMessage(ModelServerConfigOuterClass.ModelConfig.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          config_ = java.util.Collections.unmodifiableList(config_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return ModelServerConfigOuterClass.internal_static_tensorflow_serving_ModelConfigList_descriptor;
    }

    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return ModelServerConfigOuterClass.internal_static_tensorflow_serving_ModelConfigList_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              ModelServerConfigOuterClass.ModelConfigList.class, ModelServerConfigOuterClass.ModelConfigList.Builder.class);
    }

    public static final int CONFIG_FIELD_NUMBER = 1;
    private java.util.List<ModelConfig> config_;
    /**
     * <code>repeated .tensorflow.serving.ModelConfig config = 1;</code>
     */
    public java.util.List<ModelConfig> getConfigList() {
      return config_;
    }
    /**
     * <code>repeated .tensorflow.serving.ModelConfig config = 1;</code>
     */
    public java.util.List<? extends ModelConfigOrBuilder>
        getConfigOrBuilderList() {
      return config_;
    }
    /**
     * <code>repeated .tensorflow.serving.ModelConfig config = 1;</code>
     */
    public int getConfigCount() {
      return config_.size();
    }
    /**
     * <code>repeated .tensorflow.serving.ModelConfig config = 1;</code>
     */
    public ModelServerConfigOuterClass.ModelConfig getConfig(int index) {
      return config_.get(index);
    }
    /**
     * <code>repeated .tensorflow.serving.ModelConfig config = 1;</code>
     */
    public ModelServerConfigOuterClass.ModelConfigOrBuilder getConfigOrBuilder(
        int index) {
      return config_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < config_.size(); i++) {
        output.writeMessage(1, config_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < config_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, config_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof ModelServerConfigOuterClass.ModelConfigList)) {
        return super.equals(obj);
      }
      ModelServerConfigOuterClass.ModelConfigList other = (ModelServerConfigOuterClass.ModelConfigList) obj;

      if (!getConfigList()
          .equals(other.getConfigList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getConfigCount() > 0) {
        hash = (37 * hash) + CONFIG_FIELD_NUMBER;
        hash = (53 * hash) + getConfigList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static ModelServerConfigOuterClass.ModelConfigList parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ModelServerConfigOuterClass.ModelConfigList parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ModelServerConfigOuterClass.ModelConfigList parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ModelServerConfigOuterClass.ModelConfigList parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ModelServerConfigOuterClass.ModelConfigList parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ModelServerConfigOuterClass.ModelConfigList parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ModelServerConfigOuterClass.ModelConfigList parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static ModelServerConfigOuterClass.ModelConfigList parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static ModelServerConfigOuterClass.ModelConfigList parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static ModelServerConfigOuterClass.ModelConfigList parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static ModelServerConfigOuterClass.ModelConfigList parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static ModelServerConfigOuterClass.ModelConfigList parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(ModelServerConfigOuterClass.ModelConfigList prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Static list of models to be loaded for serving.
     * </pre>
     *
     * Protobuf type {@code tensorflow.serving.ModelConfigList}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:tensorflow.serving.ModelConfigList)
        ModelServerConfigOuterClass.ModelConfigListOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ModelServerConfigOuterClass.internal_static_tensorflow_serving_ModelConfigList_descriptor;
      }

      @Override
      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ModelServerConfigOuterClass.internal_static_tensorflow_serving_ModelConfigList_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ModelServerConfigOuterClass.ModelConfigList.class, ModelServerConfigOuterClass.ModelConfigList.Builder.class);
      }

      // Construct using tensorflow.serving.ModelServerConfigOuterClass.ModelConfigList.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getConfigFieldBuilder();
        }
      }
      @Override
      public Builder clear() {
        super.clear();
        if (configBuilder_ == null) {
          config_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          configBuilder_.clear();
        }
        return this;
      }

      @Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return ModelServerConfigOuterClass.internal_static_tensorflow_serving_ModelConfigList_descriptor;
      }

      @Override
      public ModelServerConfigOuterClass.ModelConfigList getDefaultInstanceForType() {
        return ModelServerConfigOuterClass.ModelConfigList.getDefaultInstance();
      }

      @Override
      public ModelServerConfigOuterClass.ModelConfigList build() {
        ModelServerConfigOuterClass.ModelConfigList result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @Override
      public ModelServerConfigOuterClass.ModelConfigList buildPartial() {
        ModelServerConfigOuterClass.ModelConfigList result = new ModelServerConfigOuterClass.ModelConfigList(this);
        int from_bitField0_ = bitField0_;
        if (configBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            config_ = java.util.Collections.unmodifiableList(config_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.config_ = config_;
        } else {
          result.config_ = configBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @Override
      public Builder clone() {
        return super.clone();
      }
      @Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.setField(field, value);
      }
      @Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.addRepeatedField(field, value);
      }
      @Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof ModelServerConfigOuterClass.ModelConfigList) {
          return mergeFrom((ModelServerConfigOuterClass.ModelConfigList)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(ModelServerConfigOuterClass.ModelConfigList other) {
        if (other == ModelServerConfigOuterClass.ModelConfigList.getDefaultInstance()) return this;
        if (configBuilder_ == null) {
          if (!other.config_.isEmpty()) {
            if (config_.isEmpty()) {
              config_ = other.config_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureConfigIsMutable();
              config_.addAll(other.config_);
            }
            onChanged();
          }
        } else {
          if (!other.config_.isEmpty()) {
            if (configBuilder_.isEmpty()) {
              configBuilder_.dispose();
              configBuilder_ = null;
              config_ = other.config_;
              bitField0_ = (bitField0_ & ~0x00000001);
              configBuilder_ =
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getConfigFieldBuilder() : null;
            } else {
              configBuilder_.addAllMessages(other.config_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @Override
      public final boolean isInitialized() {
        return true;
      }

      @Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        ModelServerConfigOuterClass.ModelConfigList parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (ModelServerConfigOuterClass.ModelConfigList) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<ModelConfig> config_ =
        java.util.Collections.emptyList();
      private void ensureConfigIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          config_ = new java.util.ArrayList<ModelConfig>(config_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          ModelConfig, ModelConfig.Builder, ModelConfigOrBuilder> configBuilder_;

      /**
       * <code>repeated .tensorflow.serving.ModelConfig config = 1;</code>
       */
      public java.util.List<ModelConfig> getConfigList() {
        if (configBuilder_ == null) {
          return java.util.Collections.unmodifiableList(config_);
        } else {
          return configBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .tensorflow.serving.ModelConfig config = 1;</code>
       */
      public int getConfigCount() {
        if (configBuilder_ == null) {
          return config_.size();
        } else {
          return configBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .tensorflow.serving.ModelConfig config = 1;</code>
       */
      public ModelServerConfigOuterClass.ModelConfig getConfig(int index) {
        if (configBuilder_ == null) {
          return config_.get(index);
        } else {
          return configBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .tensorflow.serving.ModelConfig config = 1;</code>
       */
      public Builder setConfig(
          int index, ModelServerConfigOuterClass.ModelConfig value) {
        if (configBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureConfigIsMutable();
          config_.set(index, value);
          onChanged();
        } else {
          configBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .tensorflow.serving.ModelConfig config = 1;</code>
       */
      public Builder setConfig(
          int index, ModelServerConfigOuterClass.ModelConfig.Builder builderForValue) {
        if (configBuilder_ == null) {
          ensureConfigIsMutable();
          config_.set(index, builderForValue.build());
          onChanged();
        } else {
          configBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .tensorflow.serving.ModelConfig config = 1;</code>
       */
      public Builder addConfig(ModelServerConfigOuterClass.ModelConfig value) {
        if (configBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureConfigIsMutable();
          config_.add(value);
          onChanged();
        } else {
          configBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .tensorflow.serving.ModelConfig config = 1;</code>
       */
      public Builder addConfig(
          int index, ModelServerConfigOuterClass.ModelConfig value) {
        if (configBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureConfigIsMutable();
          config_.add(index, value);
          onChanged();
        } else {
          configBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .tensorflow.serving.ModelConfig config = 1;</code>
       */
      public Builder addConfig(
          ModelServerConfigOuterClass.ModelConfig.Builder builderForValue) {
        if (configBuilder_ == null) {
          ensureConfigIsMutable();
          config_.add(builderForValue.build());
          onChanged();
        } else {
          configBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .tensorflow.serving.ModelConfig config = 1;</code>
       */
      public Builder addConfig(
          int index, ModelServerConfigOuterClass.ModelConfig.Builder builderForValue) {
        if (configBuilder_ == null) {
          ensureConfigIsMutable();
          config_.add(index, builderForValue.build());
          onChanged();
        } else {
          configBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .tensorflow.serving.ModelConfig config = 1;</code>
       */
      public Builder addAllConfig(
          Iterable<? extends ModelConfig> values) {
        if (configBuilder_ == null) {
          ensureConfigIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, config_);
          onChanged();
        } else {
          configBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .tensorflow.serving.ModelConfig config = 1;</code>
       */
      public Builder clearConfig() {
        if (configBuilder_ == null) {
          config_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          configBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .tensorflow.serving.ModelConfig config = 1;</code>
       */
      public Builder removeConfig(int index) {
        if (configBuilder_ == null) {
          ensureConfigIsMutable();
          config_.remove(index);
          onChanged();
        } else {
          configBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .tensorflow.serving.ModelConfig config = 1;</code>
       */
      public ModelServerConfigOuterClass.ModelConfig.Builder getConfigBuilder(
          int index) {
        return getConfigFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .tensorflow.serving.ModelConfig config = 1;</code>
       */
      public ModelServerConfigOuterClass.ModelConfigOrBuilder getConfigOrBuilder(
          int index) {
        if (configBuilder_ == null) {
          return config_.get(index);  } else {
          return configBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .tensorflow.serving.ModelConfig config = 1;</code>
       */
      public java.util.List<? extends ModelConfigOrBuilder>
           getConfigOrBuilderList() {
        if (configBuilder_ != null) {
          return configBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(config_);
        }
      }
      /**
       * <code>repeated .tensorflow.serving.ModelConfig config = 1;</code>
       */
      public ModelServerConfigOuterClass.ModelConfig.Builder addConfigBuilder() {
        return getConfigFieldBuilder().addBuilder(
            ModelServerConfigOuterClass.ModelConfig.getDefaultInstance());
      }
      /**
       * <code>repeated .tensorflow.serving.ModelConfig config = 1;</code>
       */
      public ModelServerConfigOuterClass.ModelConfig.Builder addConfigBuilder(
          int index) {
        return getConfigFieldBuilder().addBuilder(
            index, ModelServerConfigOuterClass.ModelConfig.getDefaultInstance());
      }
      /**
       * <code>repeated .tensorflow.serving.ModelConfig config = 1;</code>
       */
      public java.util.List<ModelConfig.Builder>
           getConfigBuilderList() {
        return getConfigFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          ModelConfig, ModelConfig.Builder, ModelConfigOrBuilder>
          getConfigFieldBuilder() {
        if (configBuilder_ == null) {
          configBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              ModelConfig, ModelConfig.Builder, ModelConfigOrBuilder>(
                  config_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          config_ = null;
        }
        return configBuilder_;
      }
      @Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:tensorflow.serving.ModelConfigList)
    }

    // @@protoc_insertion_point(class_scope:tensorflow.serving.ModelConfigList)
    private static final ModelServerConfigOuterClass.ModelConfigList DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ModelServerConfigOuterClass.ModelConfigList();
    }

    public static ModelServerConfigOuterClass.ModelConfigList getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ModelConfigList>
        PARSER = new com.google.protobuf.AbstractParser<ModelConfigList>() {
      @Override
      public ModelConfigList parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ModelConfigList(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ModelConfigList> parser() {
      return PARSER;
    }

    @Override
    public com.google.protobuf.Parser<ModelConfigList> getParserForType() {
      return PARSER;
    }

    @Override
    public ModelServerConfigOuterClass.ModelConfigList getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ModelServerConfigOrBuilder extends
      // @@protoc_insertion_point(interface_extends:tensorflow.serving.ModelServerConfig)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.tensorflow.serving.ModelConfigList model_config_list = 1;</code>
     */
    boolean hasModelConfigList();
    /**
     * <code>.tensorflow.serving.ModelConfigList model_config_list = 1;</code>
     */
    ModelServerConfigOuterClass.ModelConfigList getModelConfigList();
    /**
     * <code>.tensorflow.serving.ModelConfigList model_config_list = 1;</code>
     */
    ModelServerConfigOuterClass.ModelConfigListOrBuilder getModelConfigListOrBuilder();

    /**
     * <code>.google.protobuf.Any custom_model_config = 2;</code>
     */
    boolean hasCustomModelConfig();
    /**
     * <code>.google.protobuf.Any custom_model_config = 2;</code>
     */
    com.google.protobuf.Any getCustomModelConfig();
    /**
     * <code>.google.protobuf.Any custom_model_config = 2;</code>
     */
    com.google.protobuf.AnyOrBuilder getCustomModelConfigOrBuilder();

    public ModelServerConfigOuterClass.ModelServerConfig.ConfigCase getConfigCase();
  }
  /**
   * <pre>
   * ModelServer config.
   * </pre>
   *
   * Protobuf type {@code tensorflow.serving.ModelServerConfig}
   */
  public  static final class ModelServerConfig extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:tensorflow.serving.ModelServerConfig)
      ModelServerConfigOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ModelServerConfig.newBuilder() to construct.
    private ModelServerConfig(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ModelServerConfig() {
    }

    @Override
    @SuppressWarnings({"unused"})
    protected Object newInstance(
        UnusedPrivateParameter unused) {
      return new ModelServerConfig();
    }

    @Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ModelServerConfig(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              ModelServerConfigOuterClass.ModelConfigList.Builder subBuilder = null;
              if (configCase_ == 1) {
                subBuilder = ((ModelServerConfigOuterClass.ModelConfigList) config_).toBuilder();
              }
              config_ =
                  input.readMessage(ModelServerConfigOuterClass.ModelConfigList.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((ModelServerConfigOuterClass.ModelConfigList) config_);
                config_ = subBuilder.buildPartial();
              }
              configCase_ = 1;
              break;
            }
            case 18: {
              com.google.protobuf.Any.Builder subBuilder = null;
              if (configCase_ == 2) {
                subBuilder = ((com.google.protobuf.Any) config_).toBuilder();
              }
              config_ =
                  input.readMessage(com.google.protobuf.Any.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((com.google.protobuf.Any) config_);
                config_ = subBuilder.buildPartial();
              }
              configCase_ = 2;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return ModelServerConfigOuterClass.internal_static_tensorflow_serving_ModelServerConfig_descriptor;
    }

    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return ModelServerConfigOuterClass.internal_static_tensorflow_serving_ModelServerConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              ModelServerConfigOuterClass.ModelServerConfig.class, ModelServerConfigOuterClass.ModelServerConfig.Builder.class);
    }

    private int configCase_ = 0;
    private Object config_;
    public enum ConfigCase
        implements com.google.protobuf.Internal.EnumLite {
      MODEL_CONFIG_LIST(1),
      CUSTOM_MODEL_CONFIG(2),
      CONFIG_NOT_SET(0);
      private final int value;
      private ConfigCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @Deprecated
      public static ConfigCase valueOf(int value) {
        return forNumber(value);
      }

      public static ConfigCase forNumber(int value) {
        switch (value) {
          case 1: return MODEL_CONFIG_LIST;
          case 2: return CUSTOM_MODEL_CONFIG;
          case 0: return CONFIG_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public ConfigCase
    getConfigCase() {
      return ConfigCase.forNumber(
          configCase_);
    }

    public static final int MODEL_CONFIG_LIST_FIELD_NUMBER = 1;
    /**
     * <code>.tensorflow.serving.ModelConfigList model_config_list = 1;</code>
     */
    public boolean hasModelConfigList() {
      return configCase_ == 1;
    }
    /**
     * <code>.tensorflow.serving.ModelConfigList model_config_list = 1;</code>
     */
    public ModelServerConfigOuterClass.ModelConfigList getModelConfigList() {
      if (configCase_ == 1) {
         return (ModelServerConfigOuterClass.ModelConfigList) config_;
      }
      return ModelServerConfigOuterClass.ModelConfigList.getDefaultInstance();
    }
    /**
     * <code>.tensorflow.serving.ModelConfigList model_config_list = 1;</code>
     */
    public ModelServerConfigOuterClass.ModelConfigListOrBuilder getModelConfigListOrBuilder() {
      if (configCase_ == 1) {
         return (ModelServerConfigOuterClass.ModelConfigList) config_;
      }
      return ModelServerConfigOuterClass.ModelConfigList.getDefaultInstance();
    }

    public static final int CUSTOM_MODEL_CONFIG_FIELD_NUMBER = 2;
    /**
     * <code>.google.protobuf.Any custom_model_config = 2;</code>
     */
    public boolean hasCustomModelConfig() {
      return configCase_ == 2;
    }
    /**
     * <code>.google.protobuf.Any custom_model_config = 2;</code>
     */
    public com.google.protobuf.Any getCustomModelConfig() {
      if (configCase_ == 2) {
         return (com.google.protobuf.Any) config_;
      }
      return com.google.protobuf.Any.getDefaultInstance();
    }
    /**
     * <code>.google.protobuf.Any custom_model_config = 2;</code>
     */
    public com.google.protobuf.AnyOrBuilder getCustomModelConfigOrBuilder() {
      if (configCase_ == 2) {
         return (com.google.protobuf.Any) config_;
      }
      return com.google.protobuf.Any.getDefaultInstance();
    }

    private byte memoizedIsInitialized = -1;
    @Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (configCase_ == 1) {
        output.writeMessage(1, (ModelServerConfigOuterClass.ModelConfigList) config_);
      }
      if (configCase_ == 2) {
        output.writeMessage(2, (com.google.protobuf.Any) config_);
      }
      unknownFields.writeTo(output);
    }

    @Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (configCase_ == 1) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, (ModelServerConfigOuterClass.ModelConfigList) config_);
      }
      if (configCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, (com.google.protobuf.Any) config_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof ModelServerConfigOuterClass.ModelServerConfig)) {
        return super.equals(obj);
      }
      ModelServerConfigOuterClass.ModelServerConfig other = (ModelServerConfigOuterClass.ModelServerConfig) obj;

      if (!getConfigCase().equals(other.getConfigCase())) return false;
      switch (configCase_) {
        case 1:
          if (!getModelConfigList()
              .equals(other.getModelConfigList())) return false;
          break;
        case 2:
          if (!getCustomModelConfig()
              .equals(other.getCustomModelConfig())) return false;
          break;
        case 0:
        default:
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      switch (configCase_) {
        case 1:
          hash = (37 * hash) + MODEL_CONFIG_LIST_FIELD_NUMBER;
          hash = (53 * hash) + getModelConfigList().hashCode();
          break;
        case 2:
          hash = (37 * hash) + CUSTOM_MODEL_CONFIG_FIELD_NUMBER;
          hash = (53 * hash) + getCustomModelConfig().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static ModelServerConfigOuterClass.ModelServerConfig parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ModelServerConfigOuterClass.ModelServerConfig parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ModelServerConfigOuterClass.ModelServerConfig parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ModelServerConfigOuterClass.ModelServerConfig parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ModelServerConfigOuterClass.ModelServerConfig parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ModelServerConfigOuterClass.ModelServerConfig parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ModelServerConfigOuterClass.ModelServerConfig parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static ModelServerConfigOuterClass.ModelServerConfig parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static ModelServerConfigOuterClass.ModelServerConfig parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static ModelServerConfigOuterClass.ModelServerConfig parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static ModelServerConfigOuterClass.ModelServerConfig parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static ModelServerConfigOuterClass.ModelServerConfig parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(ModelServerConfigOuterClass.ModelServerConfig prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * ModelServer config.
     * </pre>
     *
     * Protobuf type {@code tensorflow.serving.ModelServerConfig}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:tensorflow.serving.ModelServerConfig)
        ModelServerConfigOuterClass.ModelServerConfigOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ModelServerConfigOuterClass.internal_static_tensorflow_serving_ModelServerConfig_descriptor;
      }

      @Override
      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ModelServerConfigOuterClass.internal_static_tensorflow_serving_ModelServerConfig_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ModelServerConfigOuterClass.ModelServerConfig.class, ModelServerConfigOuterClass.ModelServerConfig.Builder.class);
      }

      // Construct using tensorflow.serving.ModelServerConfigOuterClass.ModelServerConfig.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @Override
      public Builder clear() {
        super.clear();
        configCase_ = 0;
        config_ = null;
        return this;
      }

      @Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return ModelServerConfigOuterClass.internal_static_tensorflow_serving_ModelServerConfig_descriptor;
      }

      @Override
      public ModelServerConfigOuterClass.ModelServerConfig getDefaultInstanceForType() {
        return ModelServerConfigOuterClass.ModelServerConfig.getDefaultInstance();
      }

      @Override
      public ModelServerConfigOuterClass.ModelServerConfig build() {
        ModelServerConfigOuterClass.ModelServerConfig result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @Override
      public ModelServerConfigOuterClass.ModelServerConfig buildPartial() {
        ModelServerConfigOuterClass.ModelServerConfig result = new ModelServerConfigOuterClass.ModelServerConfig(this);
        if (configCase_ == 1) {
          if (modelConfigListBuilder_ == null) {
            result.config_ = config_;
          } else {
            result.config_ = modelConfigListBuilder_.build();
          }
        }
        if (configCase_ == 2) {
          if (customModelConfigBuilder_ == null) {
            result.config_ = config_;
          } else {
            result.config_ = customModelConfigBuilder_.build();
          }
        }
        result.configCase_ = configCase_;
        onBuilt();
        return result;
      }

      @Override
      public Builder clone() {
        return super.clone();
      }
      @Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.setField(field, value);
      }
      @Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.addRepeatedField(field, value);
      }
      @Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof ModelServerConfigOuterClass.ModelServerConfig) {
          return mergeFrom((ModelServerConfigOuterClass.ModelServerConfig)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(ModelServerConfigOuterClass.ModelServerConfig other) {
        if (other == ModelServerConfigOuterClass.ModelServerConfig.getDefaultInstance()) return this;
        switch (other.getConfigCase()) {
          case MODEL_CONFIG_LIST: {
            mergeModelConfigList(other.getModelConfigList());
            break;
          }
          case CUSTOM_MODEL_CONFIG: {
            mergeCustomModelConfig(other.getCustomModelConfig());
            break;
          }
          case CONFIG_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @Override
      public final boolean isInitialized() {
        return true;
      }

      @Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        ModelServerConfigOuterClass.ModelServerConfig parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (ModelServerConfigOuterClass.ModelServerConfig) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int configCase_ = 0;
      private Object config_;
      public ConfigCase
          getConfigCase() {
        return ConfigCase.forNumber(
            configCase_);
      }

      public Builder clearConfig() {
        configCase_ = 0;
        config_ = null;
        onChanged();
        return this;
      }


      private com.google.protobuf.SingleFieldBuilderV3<
          ModelConfigList, ModelConfigList.Builder, ModelConfigListOrBuilder> modelConfigListBuilder_;
      /**
       * <code>.tensorflow.serving.ModelConfigList model_config_list = 1;</code>
       */
      public boolean hasModelConfigList() {
        return configCase_ == 1;
      }
      /**
       * <code>.tensorflow.serving.ModelConfigList model_config_list = 1;</code>
       */
      public ModelServerConfigOuterClass.ModelConfigList getModelConfigList() {
        if (modelConfigListBuilder_ == null) {
          if (configCase_ == 1) {
            return (ModelServerConfigOuterClass.ModelConfigList) config_;
          }
          return ModelServerConfigOuterClass.ModelConfigList.getDefaultInstance();
        } else {
          if (configCase_ == 1) {
            return modelConfigListBuilder_.getMessage();
          }
          return ModelServerConfigOuterClass.ModelConfigList.getDefaultInstance();
        }
      }
      /**
       * <code>.tensorflow.serving.ModelConfigList model_config_list = 1;</code>
       */
      public Builder setModelConfigList(ModelServerConfigOuterClass.ModelConfigList value) {
        if (modelConfigListBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          config_ = value;
          onChanged();
        } else {
          modelConfigListBuilder_.setMessage(value);
        }
        configCase_ = 1;
        return this;
      }
      /**
       * <code>.tensorflow.serving.ModelConfigList model_config_list = 1;</code>
       */
      public Builder setModelConfigList(
          ModelServerConfigOuterClass.ModelConfigList.Builder builderForValue) {
        if (modelConfigListBuilder_ == null) {
          config_ = builderForValue.build();
          onChanged();
        } else {
          modelConfigListBuilder_.setMessage(builderForValue.build());
        }
        configCase_ = 1;
        return this;
      }
      /**
       * <code>.tensorflow.serving.ModelConfigList model_config_list = 1;</code>
       */
      public Builder mergeModelConfigList(ModelServerConfigOuterClass.ModelConfigList value) {
        if (modelConfigListBuilder_ == null) {
          if (configCase_ == 1 &&
              config_ != ModelServerConfigOuterClass.ModelConfigList.getDefaultInstance()) {
            config_ = ModelServerConfigOuterClass.ModelConfigList.newBuilder((ModelServerConfigOuterClass.ModelConfigList) config_)
                .mergeFrom(value).buildPartial();
          } else {
            config_ = value;
          }
          onChanged();
        } else {
          if (configCase_ == 1) {
            modelConfigListBuilder_.mergeFrom(value);
          }
          modelConfigListBuilder_.setMessage(value);
        }
        configCase_ = 1;
        return this;
      }
      /**
       * <code>.tensorflow.serving.ModelConfigList model_config_list = 1;</code>
       */
      public Builder clearModelConfigList() {
        if (modelConfigListBuilder_ == null) {
          if (configCase_ == 1) {
            configCase_ = 0;
            config_ = null;
            onChanged();
          }
        } else {
          if (configCase_ == 1) {
            configCase_ = 0;
            config_ = null;
          }
          modelConfigListBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.tensorflow.serving.ModelConfigList model_config_list = 1;</code>
       */
      public ModelServerConfigOuterClass.ModelConfigList.Builder getModelConfigListBuilder() {
        return getModelConfigListFieldBuilder().getBuilder();
      }
      /**
       * <code>.tensorflow.serving.ModelConfigList model_config_list = 1;</code>
       */
      public ModelServerConfigOuterClass.ModelConfigListOrBuilder getModelConfigListOrBuilder() {
        if ((configCase_ == 1) && (modelConfigListBuilder_ != null)) {
          return modelConfigListBuilder_.getMessageOrBuilder();
        } else {
          if (configCase_ == 1) {
            return (ModelServerConfigOuterClass.ModelConfigList) config_;
          }
          return ModelServerConfigOuterClass.ModelConfigList.getDefaultInstance();
        }
      }
      /**
       * <code>.tensorflow.serving.ModelConfigList model_config_list = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          ModelConfigList, ModelConfigList.Builder, ModelConfigListOrBuilder>
          getModelConfigListFieldBuilder() {
        if (modelConfigListBuilder_ == null) {
          if (!(configCase_ == 1)) {
            config_ = ModelServerConfigOuterClass.ModelConfigList.getDefaultInstance();
          }
          modelConfigListBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              ModelConfigList, ModelConfigList.Builder, ModelConfigListOrBuilder>(
                  (ModelServerConfigOuterClass.ModelConfigList) config_,
                  getParentForChildren(),
                  isClean());
          config_ = null;
        }
        configCase_ = 1;
        onChanged();;
        return modelConfigListBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Any, com.google.protobuf.Any.Builder, com.google.protobuf.AnyOrBuilder> customModelConfigBuilder_;
      /**
       * <code>.google.protobuf.Any custom_model_config = 2;</code>
       */
      public boolean hasCustomModelConfig() {
        return configCase_ == 2;
      }
      /**
       * <code>.google.protobuf.Any custom_model_config = 2;</code>
       */
      public com.google.protobuf.Any getCustomModelConfig() {
        if (customModelConfigBuilder_ == null) {
          if (configCase_ == 2) {
            return (com.google.protobuf.Any) config_;
          }
          return com.google.protobuf.Any.getDefaultInstance();
        } else {
          if (configCase_ == 2) {
            return customModelConfigBuilder_.getMessage();
          }
          return com.google.protobuf.Any.getDefaultInstance();
        }
      }
      /**
       * <code>.google.protobuf.Any custom_model_config = 2;</code>
       */
      public Builder setCustomModelConfig(com.google.protobuf.Any value) {
        if (customModelConfigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          config_ = value;
          onChanged();
        } else {
          customModelConfigBuilder_.setMessage(value);
        }
        configCase_ = 2;
        return this;
      }
      /**
       * <code>.google.protobuf.Any custom_model_config = 2;</code>
       */
      public Builder setCustomModelConfig(
          com.google.protobuf.Any.Builder builderForValue) {
        if (customModelConfigBuilder_ == null) {
          config_ = builderForValue.build();
          onChanged();
        } else {
          customModelConfigBuilder_.setMessage(builderForValue.build());
        }
        configCase_ = 2;
        return this;
      }
      /**
       * <code>.google.protobuf.Any custom_model_config = 2;</code>
       */
      public Builder mergeCustomModelConfig(com.google.protobuf.Any value) {
        if (customModelConfigBuilder_ == null) {
          if (configCase_ == 2 &&
              config_ != com.google.protobuf.Any.getDefaultInstance()) {
            config_ = com.google.protobuf.Any.newBuilder((com.google.protobuf.Any) config_)
                .mergeFrom(value).buildPartial();
          } else {
            config_ = value;
          }
          onChanged();
        } else {
          if (configCase_ == 2) {
            customModelConfigBuilder_.mergeFrom(value);
          }
          customModelConfigBuilder_.setMessage(value);
        }
        configCase_ = 2;
        return this;
      }
      /**
       * <code>.google.protobuf.Any custom_model_config = 2;</code>
       */
      public Builder clearCustomModelConfig() {
        if (customModelConfigBuilder_ == null) {
          if (configCase_ == 2) {
            configCase_ = 0;
            config_ = null;
            onChanged();
          }
        } else {
          if (configCase_ == 2) {
            configCase_ = 0;
            config_ = null;
          }
          customModelConfigBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.google.protobuf.Any custom_model_config = 2;</code>
       */
      public com.google.protobuf.Any.Builder getCustomModelConfigBuilder() {
        return getCustomModelConfigFieldBuilder().getBuilder();
      }
      /**
       * <code>.google.protobuf.Any custom_model_config = 2;</code>
       */
      public com.google.protobuf.AnyOrBuilder getCustomModelConfigOrBuilder() {
        if ((configCase_ == 2) && (customModelConfigBuilder_ != null)) {
          return customModelConfigBuilder_.getMessageOrBuilder();
        } else {
          if (configCase_ == 2) {
            return (com.google.protobuf.Any) config_;
          }
          return com.google.protobuf.Any.getDefaultInstance();
        }
      }
      /**
       * <code>.google.protobuf.Any custom_model_config = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Any, com.google.protobuf.Any.Builder, com.google.protobuf.AnyOrBuilder>
          getCustomModelConfigFieldBuilder() {
        if (customModelConfigBuilder_ == null) {
          if (!(configCase_ == 2)) {
            config_ = com.google.protobuf.Any.getDefaultInstance();
          }
          customModelConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Any, com.google.protobuf.Any.Builder, com.google.protobuf.AnyOrBuilder>(
                  (com.google.protobuf.Any) config_,
                  getParentForChildren(),
                  isClean());
          config_ = null;
        }
        configCase_ = 2;
        onChanged();;
        return customModelConfigBuilder_;
      }
      @Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:tensorflow.serving.ModelServerConfig)
    }

    // @@protoc_insertion_point(class_scope:tensorflow.serving.ModelServerConfig)
    private static final ModelServerConfigOuterClass.ModelServerConfig DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ModelServerConfigOuterClass.ModelServerConfig();
    }

    public static ModelServerConfigOuterClass.ModelServerConfig getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ModelServerConfig>
        PARSER = new com.google.protobuf.AbstractParser<ModelServerConfig>() {
      @Override
      public ModelServerConfig parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ModelServerConfig(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ModelServerConfig> parser() {
      return PARSER;
    }

    @Override
    public com.google.protobuf.Parser<ModelServerConfig> getParserForType() {
      return PARSER;
    }

    @Override
    public ModelServerConfigOuterClass.ModelServerConfig getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_tensorflow_serving_ModelConfig_descriptor;
  private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_tensorflow_serving_ModelConfig_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_tensorflow_serving_ModelConfig_VersionLabelsEntry_descriptor;
  private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_tensorflow_serving_ModelConfig_VersionLabelsEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_tensorflow_serving_ModelConfigList_descriptor;
  private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_tensorflow_serving_ModelConfigList_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_tensorflow_serving_ModelServerConfig_descriptor;
  private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_tensorflow_serving_ModelServerConfig_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    String[] descriptorData = {
      "\n\031model_server_config.proto\022\022tensorflow." +
      "serving\032\031google/protobuf/any.proto\032\024logg" +
      "ing_config.proto\032%file_system_storage_pa" +
      "th_source.proto\"\253\003\n\013ModelConfig\022\014\n\004name\030" +
      "\001 \001(\t\022\021\n\tbase_path\030\002 \001(\t\0225\n\nmodel_type\030\003" +
      " \001(\0162\035.tensorflow.serving.ModelTypeB\002\030\001\022" +
      "\026\n\016model_platform\030\004 \001(\t\022i\n\024model_version" +
      "_policy\030\007 \001(\0132K.tensorflow.serving.FileS" +
      "ystemStoragePathSourceConfig.ServableVer" +
      "sionPolicy\022J\n\016version_labels\030\010 \003(\01322.ten" +
      "sorflow.serving.ModelConfig.VersionLabel" +
      "sEntry\0229\n\016logging_config\030\006 \001(\0132!.tensorf" +
      "low.serving.LoggingConfig\0324\n\022VersionLabe" +
      "lsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\003:\0028\001J" +
      "\004\010\005\020\006\"B\n\017ModelConfigList\022/\n\006config\030\001 \003(\013" +
      "2\037.tensorflow.serving.ModelConfig\"\224\001\n\021Mo" +
      "delServerConfig\022@\n\021model_config_list\030\001 \001" +
      "(\0132#.tensorflow.serving.ModelConfigListH" +
      "\000\0223\n\023custom_model_config\030\002 \001(\0132\024.google." +
      "protobuf.AnyH\000B\010\n\006config*N\n\tModelType\022\036\n" +
      "\026MODEL_TYPE_UNSPECIFIED\020\000\032\002\010\001\022\022\n\nTENSORF" +
      "LOW\020\001\032\002\010\001\022\r\n\005OTHER\020\002\032\002\010\001B\003\370\001\001b\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.google.protobuf.AnyProto.getDescriptor(),
          LoggingConfigOuterClass.getDescriptor(),
          FileSystemStoragePathSource.getDescriptor(),
        });
    internal_static_tensorflow_serving_ModelConfig_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_tensorflow_serving_ModelConfig_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_tensorflow_serving_ModelConfig_descriptor,
        new String[] { "Name", "BasePath", "ModelType", "ModelPlatform", "ModelVersionPolicy", "VersionLabels", "LoggingConfig", });
    internal_static_tensorflow_serving_ModelConfig_VersionLabelsEntry_descriptor =
      internal_static_tensorflow_serving_ModelConfig_descriptor.getNestedTypes().get(0);
    internal_static_tensorflow_serving_ModelConfig_VersionLabelsEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_tensorflow_serving_ModelConfig_VersionLabelsEntry_descriptor,
        new String[] { "Key", "Value", });
    internal_static_tensorflow_serving_ModelConfigList_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_tensorflow_serving_ModelConfigList_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_tensorflow_serving_ModelConfigList_descriptor,
        new String[] { "Config", });
    internal_static_tensorflow_serving_ModelServerConfig_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_tensorflow_serving_ModelServerConfig_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_tensorflow_serving_ModelServerConfig_descriptor,
        new String[] { "ModelConfigList", "CustomModelConfig", "Config", });
    com.google.protobuf.AnyProto.getDescriptor();
    LoggingConfigOuterClass.getDescriptor();
    FileSystemStoragePathSource.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
